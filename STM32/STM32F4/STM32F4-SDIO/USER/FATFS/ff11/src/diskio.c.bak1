/*-----------------------------------------------------------------------*/
/* Low level disk I/O module skeleton for FatFs     (C)ChaN, 2013        */
/*-----------------------------------------------------------------------*/
/* If a working storage control module is available, it should be        */
/* attached to the FatFs via a glue function rather than modifying it.   */
/* This is an example of glue functions to attach various exsisting      */
/* storage control module to the FatFs module with a defined API.        */
/*-----------------------------------------------------------------------*/

#include "diskio.h"		/* FatFs lower layer API */
#include "sdio_sdcard.h"

#ifndef SD_BLOCK_SIZE
#define SD_BLOCK_SIZE	(512)
#endif

#define DEV_SDCARD	0		  

/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	DSTATUS stat = STA_NOINIT;
	//int result;

	switch (pdrv) {
	case DEV_SDCARD :
		//result = RAM_disk_status();

		// translate the reslut code here

		//return stat;
		stat = RES_OK;
		break;
	default:
		break;
	}
	
	return stat;
}

/*-----------------------------------------------------------------------*/
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	DSTATUS stat = STA_NOINIT;
	SD_Error result;

	switch (pdrv) {
	case DEV_SDCARD :
		//result = RAM_disk_initialize();
		result = SD_Init();
		// translate the reslut code here
		stat = (DSTATUS)result;
		break;
	default:
		break;
	}
	
	return stat;
}

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read (
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
	DRESULT res = RES_PARERR;
	SD_Error result;

	switch (pdrv) {
	case DEV_SDCARD :
		// translate the arguments here
		//result = RAM_disk_read(buff, sector, count);
		result = (SD_Error)SD_ReadDisk(buff, sector, count);	 
		// translate the reslut code here
		res = (result == SD_OK)?RES_OK:RES_ERROR;
		//return res;
		break;
	default:
		break;
	}

	return res;
}

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write (
	BYTE pdrv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
	DRESULT res = RES_PARERR;
	SD_Error result; 	 
	switch(pdrv)
	{
		case DEV_SDCARD:
			result = (SD_Error)SD_WriteDisk((u8*)buff, sector, count);
			res = (SD_OK == result)?RES_OK:RES_ERROR;
			break;
		default:
			break; 
	}

	return res;
}

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	DRESULT res = RES_PARERR;
	//int result;
	if( DEV_SDCARD == pdrv)
	{
		switch(cmd)
		{
			case GET_BLOCK_SIZE:
				*(DWORD*)buff = SDCardInfo.CardBlockSize;;
				res = RES_OK;
				break;
			case GET_SECTOR_SIZE:
				*(DWORD*)buff = (WORD)SDCardInfo.CardBlockSize;
				res = RES_OK;
				break;
			case GET_SECTOR_COUNT:
				*(DWORD*)buff = (DWORD)(SDCardInfo.CardCapacity >> 9);
				res = RES_OK;
				break;
			case CTRL_SYNC:
				//while(SD_TRANSFER_OK != SD_GetStatus());
				res = RES_OK;
				break;
			default:
				break;
		}
	}

	return res;
}

//User defined function to give a current time to fatfs module      */
//31-25: Year(0-127 org.1980), 24-21: Month(1-12), 20-16: Day(1-31) */                                                                                                                                                                                                                                          
//15-11: Hour(0-23), 10-5: Minute(0-59), 4-0: Second(0-29 *2) */                                                                                                                                                                                                                                                
DWORD get_fattime (void)
{				 
	return 0;
}			 
